generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum StatusEvento {
  ativo
  cancelado
  encerrado
}

enum TipoUsuario {
  comum
  administrador
}

model Usuario {
  id_usuario       Int      @id @default(autoincrement())
  nome             String
  email            String   @unique
  senha            String
  telefone         String
  tipo             TipoUsuario
  data_criacao     DateTime @default(now())
  data_modificacao DateTime @updatedAt

  // Relacionamentos
  eventos_criados  Evento[]
  curtidas         Curtida[]
  comentarios      Comentario[]
  denuncias        Denuncia[]
  inscricoes       Inscricao[]
}

model Categoria {
  id_categoria Int    @id @default(autoincrement())
  nome         String @unique

  eventos Evento[]
}

model Evento {
  id_evento        Int      @id @default(autoincrement())
  titulo           String
  descricao        String
  data             DateTime
  local            String
  preco            Decimal
  status           StatusEvento @default(ativo)
  data_criacao     DateTime @default(now())
  data_modificacao DateTime @updatedAt

  id_organizador   Int
  organizador      Usuario  @relation(fields: [id_organizador], references: [id_usuario])

  id_categoria Int
  categoria    Categoria @relation(fields: [id_categoria], references: [id_categoria])

  // Relacionamentos
  curtidas    Curtida[] 
  comentarios Comentario[] 
  denuncias   Denuncia[]   
  inscricoes  Inscricao[] 
}

model Curtida {
  id_curtida   Int      @id @default(autoincrement())
  data_criacao DateTime @default(now())

  id_usuario Int
  usuario    Usuario @relation(fields: [id_usuario], references: [id_usuario])

  id_evento Int
  evento    Evento  @relation(fields: [id_evento], references: [id_evento])

  @@unique([id_usuario, id_evento])
}

model Comentario {
  id_comentario Int      @id @default(autoincrement())
  texto         String
  data_criacao  DateTime @default(now())

  id_usuario Int
  usuario    Usuario @relation(fields: [id_usuario], references: [id_usuario])

  id_evento Int
  evento    Evento  @relation(fields: [id_evento], references: [id_evento])
}

enum StatusDenuncia {
  pendente
  revisada
  rejeitada
}

model Denuncia {
  id_denuncia  Int            @id @default(autoincrement())
  status       StatusDenuncia @default(pendente)
  motivo       String
  data_criacao DateTime       @default(now())

  id_usuario Int // Pessoa que denunciou
  usuario    Usuario @relation(fields: [id_usuario], references: [id_usuario])

  id_evento Int // Evento denunciado
  evento    Evento  @relation(fields: [id_evento], references: [id_evento])
}

// Agenda
model Inscricao {
  id_inscricao        Int      @id @default(autoincrement())
  data_criacao        DateTime @default(now())
  notificacoes_ativas Boolean  @default(true)

  id_usuario Int
  usuario    Usuario @relation(fields: [id_usuario], references: [id_usuario])

  id_evento Int
  evento    Evento  @relation(fields: [id_evento], references: [id_evento])

  @@unique([id_evento, id_usuario])
}